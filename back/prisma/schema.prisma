// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model users {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  password      String
  email         String   @unique
  last_login    DateTime @updatedAt
  date_of_birth String?

  portfolio_pages portfolio_pages[]

  @@map(name: "users")
}

model portfolio_pages {
  id              Int     @id @default(autoincrement())
  user            users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         Int     @unique
  published       Boolean @default(false)
  contact_address String  @default("Not set")
  max_item        Int     @default(3)
  max_depth       Int     @default(1)
  max_score       Int     @default(1)

  rader_charts                    portfolio_rader_charts[]
  rader_chart_leafs               portfolio_rader_chart_leaves[]
  portfolio_rader_chart_relations portfolio_rader_chart_relations[] @relation("Page")

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  score_standartds score_standards[]

  @@map(name: "portfolio_pages")
}

model score_standards {
  id        Int    @id @default(autoincrement())
  page_id   Int
  score_num Int
  standard  String

  page portfolio_pages @relation(fields: [page_id], references: [id], onDelete: Cascade)

  @@map(name: "portfolio_score_standards")
}

model portfolio_rader_chart_leaves {
  id       Int                    @id @default(autoincrement())
  name     String
  score    Int                    @default(0)
  chart_id Int
  page_id  Int
  chart    portfolio_rader_charts @relation(fields: [chart_id], references: [id], onDelete: Cascade)
  page     portfolio_pages        @relation(fields: [page_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "portfolio_rader_chart_leaves")
}

model portfolio_rader_charts {
  id       Int                               @id @default(autoincrement())
  name     String
  page_id  Int
  page     portfolio_pages                   @relation(fields: [page_id], references: [id], onDelete: Cascade)
  leafs    portfolio_rader_chart_leaves[]
  parents  portfolio_rader_chart_relations[] @relation("Parent")
  children portfolio_rader_chart_relations[] @relation("Child")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "portfolio_rader_chart")
}

model portfolio_rader_chart_relations {
  id        Int @id @default(autoincrement())
  page_id   Int
  parent_id Int
  child_id  Int
  depth     Int

  page   portfolio_pages         @relation("Page", fields: [page_id], references: [id], onDelete: Cascade)
  parent portfolio_rader_charts? @relation("Parent", fields: [parent_id], references: [id], onDelete: Cascade)
  child  portfolio_rader_charts? @relation("Child", fields: [child_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "portfolio_radar_chart_relation")
}
