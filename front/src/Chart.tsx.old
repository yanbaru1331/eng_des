// import React, { useEffect, useRef, useState } from 'react';
// import Button from "../components/Button";

// import { Chart, RadarController, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend } from 'chart.js';
// // import './MyChart.css'; // CSSファイルをインポート

// // Chart.jsで必要なコンポーネントを登録
// Chart.register(RadarController, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend);

// const MyChart: React.FC = () => {
//   const chartRef = useRef<HTMLCanvasElement | null>(null);
//   const chartInstanceRef = useRef<Chart | null>(null);

//   const [piece, setPiece] = useState("");

//   //それがうまく行ったら親子関係を作ってみる
//   //rootは一旦NULL？
//   const [label, setLabel] = useState<string[]>([]);
//   const [data, setData] = useState<number[]>([]);

//   //平均値のグラフを書く
//   const [ave, setAve] =useState<number[]>([]);

//   function chart() {
//     if (chartRef.current) {
//       // 既存のチャートがある場合は破棄
//       if (chartInstanceRef.current) {
//         chartInstanceRef.current.destroy();
//       }

//       // 新しいチャートを作成
//       chartInstanceRef.current = new Chart(chartRef.current, {
//         type: 'radar',
//         data: {
//           labels: label,
//           datasets: [{
//             label: "前期試験成績",
//             data: data,
//             backgroundColor: "rgba(67, 133, 215, 0.5)",  // グラフ背景色
//             borderColor: "rgba(67, 133, 215, 1)",        // グラフボーダー色
//           },{
//             label: "後期試験成績",
//             data: ave,
//             backgroundColor: "red",  // グラフ背景色
//             borderColor: "red",        // グラフボーダー色
//           }]
//         },
//         options: {
//           scales: {
//             r: {
//               max: 5,        // グラフの最大値
//               min: 0,        // グラフの最小値
//               ticks: {
//                 stepSize: 0  // 目盛間隔
//               }
//             }
//           },
//         }
//       });
//     }
//   }



//   const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
//     event.preventDefault();
//     const newLabels: string[] = [];
//     const newData: number[] = [];
//     for (let i = 0; i < Number(piece); i++) {
//       newLabels[i] = (`要素${(i+1)}`);
//       newData.push(Math.floor(Math.random() * 6));
//     }
//     setLabel([...newLabels]);
//     setData([...newData]);


//     //　平均の赤グラフを書く
//     const average:Number = newData.reduce((a, c) => a + c, 0) / Number(piece);
//     setAve(new Array(Number(piece)).fill(average));
//     await chart();
    
//   };




  
//   return (
//     <div>
//     <form className='chart-form' onClick={handleSubmit}>
//     <h1>個数</h1>
//       <label>
//         個数
//         <input
//           type="number"
//           value={piece}
//           onChange={(e) => setPiece(e.target.value)}
//         />
//       </label>
//       <Button type="button" size="large">作成</Button>
//     </form>
//     <div className="chart-container" style={{position: 'relative',height:'40vh', width:'80vw'}}>
//       <canvas id="myChart" ref={chartRef}></canvas>
//     </div>
//     <div className="chart-container2" style={{position: 'relative', height:'80vh', width:'80vw'}}>
//       <canvas id="myChart2" ref={chartRef}></canvas>
//     </div>
//     </div>
//   );
// };

// export default MyChart;


import React, { useEffect, useRef, useState } from 'react';
import Button from "../components/Button";

import { Chart, RadarController, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend } from 'chart.js';

Chart.register(RadarController, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend);

const MyChart: React.FC = () => {
  const chartRef = useRef<HTMLCanvasElement | null>(null);
  const chartInstanceRef = useRef<Chart | null>(null);

  const [piece, setPiece] = useState<number>(0);

  //配列にすることで動的なフィールドを作成
  const [labels, setLabels] = useState<string[]>([]);
  const [data, setData] = useState<number[]>([]);
  const [ave, setAve] = useState<number[]>([]);
  const [title, setTitle] = useState<string>('');
  const [stage, setStage] = useState<number>(0);  // 段数, 0無し 1~3


  
  // 動的に入力フィールドを生成するための配列
  const [inputFields, setInputFields] = useState<{ label: string, value: number }[]>([]);

  useEffect(() => {
    // pieceが変更されたら、それに応じた数の入力フィールドを生成
    const fields = Array.from({ length: piece }, (_, i) => ({ label: `要素${i + 1}`, value: 0}));
    setInputFields(fields);
  }, [piece]);

  // チャートを描画する関数
  function  chart() {
    if (chartRef.current) {
      if (chartInstanceRef.current) {
        chartInstanceRef.current.destroy();
      }

      chartInstanceRef.current = new Chart(chartRef.current, {
        type: 'radar',
        data: {
          labels: labels,
          datasets: [{
            label: "userinput",
            data: data,
            backgroundColor: "rgba(67, 133, 215, 0.5)",
            borderColor: "rgba(67, 133, 215, 1)",
          },{
            label: "平均値",
            data: ave,
            backgroundColor: "rgba(255, 99, 132, 0.5)",
            borderColor: "rgba(255, 99, 132, 1)",
          }]
        },
        options: {
          scales: {
            r: {
              max: 5,
              min: 0,
              ticks: {
                stepSize: 1
              }
            }
          },
        }
      });
    }
  }

  const handleInputChange = (index: number, field: string, value: string) => {
    const newFields = [...inputFields];
    if (field === 'label') {
      newFields[index].label = value;
    } else {
      newFields[index].value = Number(value);
    }
    setInputFields(newFields);
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
  
  //絶対に必要なものをまず宣言
    const form = new FormData(event.currentTarget);
    const mainTitle = form.get('mainTitle') as string || "";

    event.preventDefault();
    const newLabels = inputFields.map(field => field.label);
    const newData = inputFields.map(field => field.value);
    console.log(title);
    setLabels(newLabels);
    setData(newData);
    //バックエンドに登録する処理を書く


    const average = newData.reduce((a, c) => a + c, 0) / piece;
    setAve(new Array(piece).fill(average));

    await chart();
  };

  return (
    <div>
      <form className='chart-form' onSubmit={handleSubmit}>
      <div>
        <label>
          メインタイトル
          <input
            type="text" name="mainTitle" defaultValue=""/>
        </label>
        </div>

        <div>
        <label>
          段数
          {/* 制限がかかっているように見えて掛かっていないので後で時間があれば修正 */}
          <input
            type="number"
            value={stage}
            max="3"
            onChange={(e) => {
              if (Number(e.target.value) > 3) {
                setStage(0)
              }else{
              setStage(Number(e.target.value))}
            }
              }/>
        </label>
        </div>
        <div>
        <label>
          要素数
          {/* 段数をとりあえず5で指定 */}
          <input
            type="number"
            value={piece}
            max="5"
        //     onChange={(e) => {
        //       if (Number(e.target.value) <= 5 && Number(e.target.value) > 0) {
        //       setPiece(Number(e.target.value))}
        //       else {
        //         setPiece(0)
        //       }
        //   }
        // }
          />
        </label>
        </div>
{/* ここにプルダウンと聞くフォームっぽいのを書く */}
          <div>
          <label>
          番号
          <select>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            </select>
          </label>
          </div>

        <h2>グラフサブタイトル</h2>
        <label>
          サブタイトル
          <input
            type="text"
            // onChange={(e) => setTitle(e.target.value)}
          />
        </label>
        <div>
        <label>
          個数
          {/* 段数をとりあえず5で指定  -> 3個~6個の間*/}
          <input
            type="number"
            value={piece}
            max="5"
            onChange={(e) => {
              if (Number(e.target.value) <= 5 && Number(e.target.value) > 0) {
              setPiece(Number(e.target.value))}
              else {
                setPiece(0)
              }
          }
        }
          />
          
        </label>
        </div>
        {
        inputFields.map((field, index) => (
          <div key={index}>
            <label>
              タイトル{index + 1}
              <input
                type="text"
                value={field.label}
                onChange={(e) => handleInputChange(index, 'label', e.target.value)}
              />
            </label>
            {/* これは最下位層のみ */}
            <label>
              値{index + 1}
              <input
                type="number"
                min="0"
                max="5"
                value={field.value}
                onChange={(e) => handleInputChange(index, 'value', e.target.value)}
              />
            </label>
          </div>
        ))}
        <Button type="submit" size="large">作成</Button>
      </form>
      <div className="chart-container" style={{ position: 'relative', height: '40vh', width: '80vw' }}>
        <canvas id="myChart" ref={chartRef}></canvas>
      </div>
    </div>
  );
}; 

export default MyChart;
